/// <reference lib="webworker" />
/* eslint-disable no-restricted-globals */

// This service worker can be customized!
// See https://developers.google.com/web/tools/workbox/modules
// for the list of available Workbox modules, or add any other
// code you'd like.
// You can also remove this file if you'd prefer not to use a
// service worker, and the Workbox build step will be skipped.

import { clientsClaim } from 'workbox-core';
import { ExpirationPlugin } from 'workbox-expiration';
import { createHandlerBoundToURL, precacheAndRoute } from 'workbox-precaching';
import { registerRoute } from 'workbox-routing';
import { StaleWhileRevalidate } from 'workbox-strategies';

import { REACT_APP__HUB_PUBLIC_URL } from './env';
import { truncateAddress } from './utils/string';

declare const self: ServiceWorkerGlobalScope;

enum NotificationType {
	INCOMING_MAIL = 'INCOMING_MAIL',
	POST_REPLY = 'POST_REPLY',
}

interface IncomingMailData {
	type: NotificationType.INCOMING_MAIL;
	body: {
		senderAddress: string;
		recipientAddress: string;
		msgId: string;
	};
}

interface PostReplyData {
	type: NotificationType.POST_REPLY;
	body: {
		feedId: string;
		author: {
			address: string;
			postId: string;
		};
		reply: {
			address: string;
			postId: string;
		};
	};
}

function parseNotificationData(data: unknown) {
	console.debug('Parsing push data', data);
	return JSON.parse(data as string) as IncomingMailData | PostReplyData;
}

//

clientsClaim();

// Precache all of the assets generated by your build process.
// Their URLs are injected into the manifest variable below.
// This variable must be present somewhere in your service worker file,
// even if you decide not to use precaching. See https://cra.link/PWA
precacheAndRoute(self.__WB_MANIFEST);

// Set up App Shell-style routing, so that all navigation requests
// are fulfilled with your index.html shell. Learn more at
// https://developers.google.com/web/fundamentals/architecture/app-shell
const fileExtensionRegexp = new RegExp('/[^/?]+\\.[^/]+$');
registerRoute(
	// Return false to exempt requests from being fulfilled by index.html.
	({ request, url }: { request: Request; url: URL }) => {
		// If this isn't a navigation, skip.
		if (request.mode !== 'navigate') {
			return false;
		}

		// If this is a URL that starts with /_, skip.
		if (url.pathname.startsWith('/_')) {
			return false;
		}

		// If this looks like a URL for a resource, because it contains
		// a file extension, skip.
		if (url.pathname.match(fileExtensionRegexp)) {
			return false;
		}

		// Return true to signal that we want to use the handler.
		return true;
	},
	createHandlerBoundToURL(REACT_APP__HUB_PUBLIC_URL + '/index.html'),
);

// An example runtime caching route for requests that aren't handled by the
// precache, in this case same-origin .png requests like those from in public/
registerRoute(
	// Add in any other file extensions or routing criteria as needed.
	({ url }) => url.origin === self.location.origin && url.pathname.endsWith('.png'),
	// Customize this strategy as needed, e.g., by changing to CacheFirst.
	new StaleWhileRevalidate({
		cacheName: 'images',
		plugins: [
			// Ensure that once this runtime cache reaches a maximum size the
			// least-recently used images are removed.
			new ExpirationPlugin({ maxEntries: 50 }),
		],
	}),
);

// This allows the web app to trigger skipWaiting via
// registration.waiting.postMessage({type: 'SKIP_WAITING'})
self.addEventListener('message', event => {
	if (event.data && event.data.type === 'SKIP_WAITING') {
		self.skipWaiting();
	}
});

// Any other custom service worker logic can go here.
self.addEventListener('push', async event => {
	console.log('Push received', event);

	function showNotification(title: string, options?: NotificationOptions) {
		event.waitUntil(
			self.registration.showNotification(title, {
				icon: '/push-notification-icon.png',
				badge: '/push-notification-badge.png',
				...options,
			}),
		);
	}

	if (event.data) {
		const rawData = event.data.text();
		const data = parseNotificationData(rawData);

		if (data.type === NotificationType.INCOMING_MAIL) {
			showNotification('New message', {
				body: `SENDER · ${truncateAddress(data.body.senderAddress)}`,
				data: rawData,
			});
		}

		if (data.type === NotificationType.POST_REPLY) {
			showNotification('New reply to your post', {
				body: `AUTHOR · ${truncateAddress(data.body.reply.address)}`,
				data: rawData,
			});
		}
	}
});

self.addEventListener('notificationclick', event => {
	console.log('Notification click received', event);

	event.notification.close();

	const data = parseNotificationData(event.notification.data);

	if (data.type === NotificationType.INCOMING_MAIL) {
		const url = `/mail/inbox/${encodeURIComponent(`${data.body.msgId}:${data.body.recipientAddress}`)}`;
		event.waitUntil(self.clients.openWindow(url));
	}

	if (data.type === NotificationType.POST_REPLY) {
		const url = `/post/${encodeURIComponent(data.body.reply.postId)}`;
		event.waitUntil(self.clients.openWindow(url));
	}
});
